//
//  StyleKit2.swift
//  HearingApp
//
//  Created by Lily on Feb 16, 2019.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class StyleKit2: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawIPhone8(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Rectangle
        let rectangle = UIBezierPath()
        rectangle.move(to: CGPoint(x: 2, y: 0))
        rectangle.addLine(to: CGPoint(x: 373, y: 0))
        rectangle.addCurve(to: CGPoint(x: 375, y: 2), controlPoint1: CGPoint(x: 374.1, y: 0), controlPoint2: CGPoint(x: 375, y: 0.9))
        rectangle.addLine(to: CGPoint(x: 375, y: 665))
        rectangle.addCurve(to: CGPoint(x: 373, y: 667), controlPoint1: CGPoint(x: 375, y: 666.1), controlPoint2: CGPoint(x: 374.1, y: 667))
        rectangle.addLine(to: CGPoint(x: 2, y: 667))
        rectangle.addCurve(to: CGPoint(x: 0, y: 665), controlPoint1: CGPoint(x: 0.9, y: 667), controlPoint2: CGPoint(x: 0, y: 666.1))
        rectangle.addLine(to: CGPoint(x: 0, y: 2))
        rectangle.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
        rectangle.close()
        context.saveGState()
        context.setAlpha(0.38)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            rectangle.usesEvenOddFillRule = true
            UIColor(hue: 0.545, saturation: 0.392, brightness: 0.998, alpha: 1).setFill()
            rectangle.fill()
            context.saveGState()
            rectangle.lineWidth = 2
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.clip(using: .evenOdd)
            UIColor(white: 0.592, alpha: 1).setStroke()
            rectangle.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        /// Click here to start
        let clickHereToStart = NSMutableAttributedString(string: "Click here to start the test")
        clickHereToStart.addAttribute(.font, value: UIFont(name: "Helvetica", size: 20)!, range: NSRange(location: 0, length: clickHereToStart.length))
        clickHereToStart.addAttribute(.kern, value: 0.24, range: NSRange(location: 0, length: clickHereToStart.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 39
            paragraphStyle.minimumLineHeight = 39
            clickHereToStart.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: clickHereToStart.length))
        }
        context.saveGState()
        clickHereToStart.draw(in: CGRect(x: 66, y: 295, width: 243, height: 43))
        context.restoreGState()
        
        /// answer/match/selected
        // Warning: New symbols are not supported.
        
        /// Welcome to Hearing T
        let welcomeToHearingT = NSMutableAttributedString(string: "Welcome to Hearing Test")
        welcomeToHearingT.addAttribute(.font, value: UIFont(name: "Helvetica", size: 26)!, range: NSRange(location: 0, length: welcomeToHearingT.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 24
            paragraphStyle.minimumLineHeight = 24
            welcomeToHearingT.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: welcomeToHearingT.length))
        }
        context.saveGState()
        context.setAlpha(0.6)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            welcomeToHearingT.draw(at: CGPoint(x: 43, y: 83))
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        /// icons/content/avocado
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    /// Page 2
    
    class func drawPage2() {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Rectangle
        let rectangle = UIBezierPath()
        rectangle.move(to: CGPoint(x: 2, y: 0))
        rectangle.addLine(to: CGPoint(x: 373, y: 0))
        rectangle.addCurve(to: CGPoint(x: 375, y: 2), controlPoint1: CGPoint(x: 374.1, y: 0), controlPoint2: CGPoint(x: 375, y: 0.9))
        rectangle.addLine(to: CGPoint(x: 375, y: 665))
        rectangle.addCurve(to: CGPoint(x: 373, y: 667), controlPoint1: CGPoint(x: 375, y: 666.1), controlPoint2: CGPoint(x: 374.1, y: 667))
        rectangle.addLine(to: CGPoint(x: 2, y: 667))
        rectangle.addCurve(to: CGPoint(x: 0, y: 665), controlPoint1: CGPoint(x: 0.9, y: 667), controlPoint2: CGPoint(x: 0, y: 666.1))
        rectangle.addLine(to: CGPoint(x: 0, y: 2))
        rectangle.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
        rectangle.close()
        context.saveGState()
        context.setAlpha(0.38)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: -145, y: -309)
            rectangle.usesEvenOddFillRule = true
            UIColor(hue: 0.545, saturation: 0.392, brightness: 0.998, alpha: 1).setFill()
            rectangle.fill()
            context.saveGState()
            rectangle.lineWidth = 2
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.clip(using: .evenOdd)
            UIColor(white: 0.592, alpha: 1).setStroke()
            rectangle.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        /// Yes, I can
        let yesICan = NSMutableAttributedString(string: "Yes, I can")
        yesICan.addAttribute(.font, value: UIFont(name: "Helvetica", size: 15)!, range: NSRange(location: 0, length: yesICan.length))
        yesICan.addAttribute(.kern, value: 0.09, range: NSRange(location: 0, length: yesICan.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 13
            paragraphStyle.minimumLineHeight = 13
            yesICan.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: yesICan.length))
        }
        context.saveGState()
        yesICan.draw(at: CGPoint(x: -93, y: 170))
        context.restoreGState()
        
        /// No, I can’t
        let noICant = NSMutableAttributedString(string: "No, I can’t")
        noICant.addAttribute(.font, value: UIFont(name: "Helvetica", size: 15)!, range: NSRange(location: 0, length: noICant.length))
        noICant.addAttribute(.kern, value: 0.09, range: NSRange(location: 0, length: noICant.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 13
            paragraphStyle.minimumLineHeight = 13
            noICant.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: noICant.length))
        }
        context.saveGState()
        noICant.draw(at: CGPoint(x: 76, y: 170))
        context.restoreGState()
        
        /// Can you hear this fr
        let canYouHearThisFr = NSMutableAttributedString(string: "Can you hear this frequency?")
        canYouHearThisFr.addAttribute(.font, value: UIFont(name: "Helvetica", size: 19)!, range: NSRange(location: 0, length: canYouHearThisFr.length))
        canYouHearThisFr.addAttribute(.kern, value: 0.25, range: NSRange(location: 0, length: canYouHearThisFr.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 44
            paragraphStyle.minimumLineHeight = 44
            canYouHearThisFr.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: canYouHearThisFr.length))
        }
        canYouHearThisFr.addAttribute(.foregroundColor, value: UIColor(hue: 0.457, saturation: 0.227, brightness: 0.329, alpha: 1), range: NSRange(location: 0, length: canYouHearThisFr.length))
        context.saveGState()
        canYouHearThisFr.draw(at: CGPoint(x: -98, y: 42))
        context.restoreGState()
        
        /// icons/content/watermelon
        // Warning: New symbols are not supported.
        
        /// graph
        do {
            context.saveGState()
            context.translateBy(x: -126, y: -209)
            
            /// container
            let container = UIBezierPath()
            container.move(to: CGPoint(x: 8, y: 0))
            container.addLine(to: CGPoint(x: 327, y: 0))
            container.addCurve(to: CGPoint(x: 335, y: 8), controlPoint1: CGPoint(x: 331.42, y: 0), controlPoint2: CGPoint(x: 335, y: 3.58))
            container.addLine(to: CGPoint(x: 335, y: 216))
            container.addCurve(to: CGPoint(x: 327, y: 224), controlPoint1: CGPoint(x: 335, y: 220.42), controlPoint2: CGPoint(x: 331.42, y: 224))
            container.addLine(to: CGPoint(x: 8, y: 224))
            container.addCurve(to: CGPoint(x: 0, y: 216), controlPoint1: CGPoint(x: 3.58, y: 224), controlPoint2: CGPoint(x: 0, y: 220.42))
            container.addLine(to: CGPoint(x: 0, y: 8))
            container.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 0, y: 3.58), controlPoint2: CGPoint(x: 3.58, y: 0))
            container.close()
            context.saveGState()
            context.saveGState()
            container.lineWidth = 2
            context.beginPath()
            context.addPath(container.cgPath)
            context.clip(using: .evenOdd)
            UIColor(white: 0.921, alpha: 1).setStroke()
            container.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// container (Outline Mask)
            context.saveGState()
            container.addClip()
            
            /// online users
            do {
                context.saveGState()
                context.translateBy(x: -6, y: 89)
                
                /// Path 3
                let path3 = UIBezierPath()
                path3.move(to: CGPoint(x: 0, y: 22.47))
                path3.addCurve(to: CGPoint(x: 61, y: 63.97), controlPoint1: CGPoint(x: 24, y: 48.65), controlPoint2: CGPoint(x: 44.33, y: 62.48))
                path3.addCurve(to: CGPoint(x: 158, y: 43.22), controlPoint1: CGPoint(x: 86, y: 66.22), controlPoint2: CGPoint(x: 105, y: 4.53))
                path3.addCurve(to: CGPoint(x: 236, y: 28.08), controlPoint1: CGPoint(x: 193.33, y: 69.02), controlPoint2: CGPoint(x: 219.33, y: 63.97))
                path3.addCurve(to: CGPoint(x: 319, y: 32.57), controlPoint1: CGPoint(x: 257.33, y: -10.8), controlPoint2: CGPoint(x: 285, y: -9.31))
                path3.addCurve(to: CGPoint(x: 380, y: 32.02), controlPoint1: CGPoint(x: 353, y: 74.44), controlPoint2: CGPoint(x: 373.33, y: 74.26))
                path3.addLine(to: CGPoint(x: 356, y: 142.49))
                path3.addLine(to: CGPoint(x: 0, y: 142.49))
                path3.addLine(to: CGPoint(x: 0, y: 22.47))
                path3.close()
                context.saveGState()
                context.translateBy(x: 0, y: 23.51)
                path3.usesEvenOddFillRule = true
                context.saveGState()
                path3.addClip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.029, saturation: 0.105, brightness: 1, alpha: 0.5).cgColor,
                            UIColor(hue: 0.026, saturation: 0.227, brightness: 1, alpha: 0.75).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 190, y: 142.49),
                    end: CGPoint(x: 190, y: 0),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                path3.lineWidth = 3
                UIColor(hue: 0.023, saturation: 0.475, brightness: 1, alpha: 1).setStroke()
                path3.stroke()
                context.restoreGState()
                
                /// 12
                do {
                    context.saveGState()
                    context.translateBy(x: 118, y: 32.53)
                    
                    /// Oval Copy 4
                    let ovalCopy4 = UIBezierPath()
                    ovalCopy4.move(to: CGPoint(x: 5, y: 11.22))
                    ovalCopy4.addCurve(to: CGPoint(x: 10, y: 5.61), controlPoint1: CGPoint(x: 7.76, y: 11.22), controlPoint2: CGPoint(x: 10, y: 8.71))
                    ovalCopy4.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 10, y: 2.51), controlPoint2: CGPoint(x: 7.76, y: 0))
                    ovalCopy4.addCurve(to: CGPoint(x: 0, y: 5.61), controlPoint1: CGPoint(x: 2.24, y: 0), controlPoint2: CGPoint(x: 0, y: 2.51))
                    ovalCopy4.addCurve(to: CGPoint(x: 5, y: 11.22), controlPoint1: CGPoint(x: 0, y: 8.71), controlPoint2: CGPoint(x: 2.24, y: 11.22))
                    ovalCopy4.close()
                    context.saveGState()
                    context.translateBy(x: 2, y: 16.82)
                    ovalCopy4.usesEvenOddFillRule = true
                    UIColor.white.setFill()
                    ovalCopy4.fill()
                    ovalCopy4.lineWidth = 3
                    UIColor(hue: 0.023, saturation: 0.475, brightness: 1, alpha: 1).setStroke()
                    ovalCopy4.stroke()
                    context.restoreGState()
                    
                    /// 12
                    let _12 = NSMutableAttributedString(string: "12")
                    _12.addAttribute(.font, value: UIFont(name: "HiraginoSans-W4", size: 10)!, range: NSRange(location: 0, length: _12.length))
                    _12.addAttribute(.foregroundColor, value: UIColor(white: 0.4, alpha: 1), range: NSRange(location: 0, length: _12.length))
                    context.saveGState()
                    _12.draw(in: CGRect(x: 0, y: 0.61, width: 14, height: 11))
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// 16
                do {
                    context.saveGState()
                    context.translateBy(x: 258, y: 0)
                    
                    /// Oval Copy 6
                    let ovalCopy6 = UIBezierPath()
                    ovalCopy6.move(to: CGPoint(x: 5, y: 11.22))
                    ovalCopy6.addCurve(to: CGPoint(x: 10, y: 5.61), controlPoint1: CGPoint(x: 7.76, y: 11.22), controlPoint2: CGPoint(x: 10, y: 8.71))
                    ovalCopy6.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 10, y: 2.51), controlPoint2: CGPoint(x: 7.76, y: 0))
                    ovalCopy6.addCurve(to: CGPoint(x: 0, y: 5.61), controlPoint1: CGPoint(x: 2.24, y: 0), controlPoint2: CGPoint(x: 0, y: 2.51))
                    ovalCopy6.addCurve(to: CGPoint(x: 5, y: 11.22), controlPoint1: CGPoint(x: 0, y: 8.71), controlPoint2: CGPoint(x: 2.24, y: 11.22))
                    ovalCopy6.close()
                    context.saveGState()
                    context.translateBy(x: 3, y: 17.95)
                    ovalCopy6.usesEvenOddFillRule = true
                    UIColor.white.setFill()
                    ovalCopy6.fill()
                    ovalCopy6.lineWidth = 3
                    UIColor(hue: 0.023, saturation: 0.475, brightness: 1, alpha: 1).setStroke()
                    ovalCopy6.stroke()
                    context.restoreGState()
                    
                    /// 16
                    let _16 = NSMutableAttributedString(string: "16")
                    _16.addAttribute(.font, value: UIFont(name: "HiraginoSans-W4", size: 10)!, range: NSRange(location: 0, length: _16.length))
                    _16.addAttribute(.foregroundColor, value: UIColor(white: 0.4, alpha: 1), range: NSRange(location: 0, length: _16.length))
                    context.saveGState()
                    _16.draw(in: CGRect(x: 0, y: 0.61, width: 14, height: 11))
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// active users
            do {
                context.saveGState()
                context.translateBy(x: -7, y: 81)
                
                /// Path 2
                let path2 = UIBezierPath()
                path2.move(to: CGPoint(x: 0, y: 82.76))
                path2.addCurve(to: CGPoint(x: 89, y: 46.97), controlPoint1: CGPoint(x: 32.67, y: 38.77), controlPoint2: CGPoint(x: 62.33, y: 26.84))
                path2.addCurve(to: CGPoint(x: 165, y: 22.37), controlPoint1: CGPoint(x: 115.67, y: 67.11), controlPoint2: CGPoint(x: 141, y: 58.9))
                path2.addCurve(to: CGPoint(x: 231, y: 22.37), controlPoint1: CGPoint(x: 185.67, y: -5.22), controlPoint2: CGPoint(x: 207.67, y: -5.22))
                path2.addCurve(to: CGPoint(x: 290, y: 22.37), controlPoint1: CGPoint(x: 254.33, y: 49.96), controlPoint2: CGPoint(x: 274, y: 49.96))
                path2.addCurve(to: CGPoint(x: 364, y: 22.37), controlPoint1: CGPoint(x: 309.33, y: -7.46), controlPoint2: CGPoint(x: 334, y: -7.46))
                path2.addCurve(to: CGPoint(x: 376, y: 148.75), controlPoint1: CGPoint(x: 394, y: 52.19), controlPoint2: CGPoint(x: 398, y: 94.32))
                path2.addLine(to: CGPoint(x: 0, y: 148.75))
                path2.addLine(to: CGPoint(x: 0, y: 82.76))
                path2.close()
                context.saveGState()
                context.translateBy(x: -0, y: 21.25)
                path2.usesEvenOddFillRule = true
                context.saveGState()
                path2.addClip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.629, saturation: 0.097, brightness: 1, alpha: 0.5).cgColor,
                            UIColor(hue: 0.631, saturation: 0.206, brightness: 0.992, alpha: 0.75).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 194.98, y: 122.02),
                    end: CGPoint(x: 194.98, y: 0),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                path2.lineWidth = 3
                UIColor(hue: 0.626, saturation: 0.463, brightness: 1, alpha: 1).setStroke()
                path2.stroke()
                context.restoreGState()
                
                /// 15
                do {
                    context.saveGState()
                    context.translateBy(x: 56, y: 35.79)
                    
                    /// Oval
                    let oval = UIBezierPath()
                    oval.move(to: CGPoint(x: 5, y: 11.18))
                    oval.addCurve(to: CGPoint(x: 10, y: 5.59), controlPoint1: CGPoint(x: 7.76, y: 11.18), controlPoint2: CGPoint(x: 10, y: 8.68))
                    oval.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 10, y: 2.5), controlPoint2: CGPoint(x: 7.76, y: 0))
                    oval.addCurve(to: CGPoint(x: 0, y: 5.59), controlPoint1: CGPoint(x: 2.24, y: 0), controlPoint2: CGPoint(x: 0, y: 2.5))
                    oval.addCurve(to: CGPoint(x: 5, y: 11.18), controlPoint1: CGPoint(x: 0, y: 8.68), controlPoint2: CGPoint(x: 2.24, y: 11.18))
                    oval.close()
                    context.saveGState()
                    context.translateBy(x: 2, y: 16.78)
                    oval.usesEvenOddFillRule = true
                    UIColor.white.setFill()
                    oval.fill()
                    oval.lineWidth = 3
                    UIColor(hue: 0.626, saturation: 0.463, brightness: 1, alpha: 1).setStroke()
                    oval.stroke()
                    context.restoreGState()
                    
                    /// 15
                    let _15 = NSMutableAttributedString(string: "15")
                    _15.addAttribute(.font, value: UIFont(name: "HiraginoSans-W4", size: 10)!, range: NSRange(location: 0, length: _15.length))
                    _15.addAttribute(.foregroundColor, value: UIColor(white: 0.4, alpha: 1), range: NSRange(location: 0, length: _15.length))
                    context.saveGState()
                    _15.draw(in: CGRect(x: 0, y: 0.59, width: 14, height: 11))
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// 28
                do {
                    context.saveGState()
                    context.translateBy(x: 173, y: 4.47)
                    
                    /// Oval Copy 2
                    let ovalCopy2 = UIBezierPath()
                    ovalCopy2.move(to: CGPoint(x: 5, y: 11.18))
                    ovalCopy2.addCurve(to: CGPoint(x: 10, y: 5.59), controlPoint1: CGPoint(x: 7.76, y: 11.18), controlPoint2: CGPoint(x: 10, y: 8.68))
                    ovalCopy2.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 10, y: 2.5), controlPoint2: CGPoint(x: 7.76, y: 0))
                    ovalCopy2.addCurve(to: CGPoint(x: 0, y: 5.59), controlPoint1: CGPoint(x: 2.24, y: 0), controlPoint2: CGPoint(x: 0, y: 2.5))
                    ovalCopy2.addCurve(to: CGPoint(x: 5, y: 11.18), controlPoint1: CGPoint(x: 0, y: 8.68), controlPoint2: CGPoint(x: 2.24, y: 11.18))
                    ovalCopy2.close()
                    context.saveGState()
                    context.translateBy(x: 3, y: 16.78)
                    ovalCopy2.usesEvenOddFillRule = true
                    UIColor.white.setFill()
                    ovalCopy2.fill()
                    ovalCopy2.lineWidth = 3
                    UIColor(hue: 0.626, saturation: 0.463, brightness: 1, alpha: 1).setStroke()
                    ovalCopy2.stroke()
                    context.restoreGState()
                    
                    /// 28
                    let _28 = NSMutableAttributedString(string: "28")
                    _28.addAttribute(.font, value: UIFont(name: "HiraginoSans-W4", size: 10)!, range: NSRange(location: 0, length: _28.length))
                    _28.addAttribute(.foregroundColor, value: UIColor(white: 0.4, alpha: 1), range: NSRange(location: 0, length: _28.length))
                    context.saveGState()
                    _28.draw(in: CGRect(x: 0, y: 0.59, width: 14, height: 11))
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// 26
                do {
                    context.saveGState()
                    context.translateBy(x: 315, y: 0)
                    
                    /// Oval Copy 3
                    let ovalCopy3 = UIBezierPath()
                    ovalCopy3.move(to: CGPoint(x: 5, y: 11.18))
                    ovalCopy3.addCurve(to: CGPoint(x: 10, y: 5.59), controlPoint1: CGPoint(x: 7.76, y: 11.18), controlPoint2: CGPoint(x: 10, y: 8.68))
                    ovalCopy3.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 10, y: 2.5), controlPoint2: CGPoint(x: 7.76, y: 0))
                    ovalCopy3.addCurve(to: CGPoint(x: 0, y: 5.59), controlPoint1: CGPoint(x: 2.24, y: 0), controlPoint2: CGPoint(x: 0, y: 2.5))
                    ovalCopy3.addCurve(to: CGPoint(x: 5, y: 11.18), controlPoint1: CGPoint(x: 0, y: 8.68), controlPoint2: CGPoint(x: 2.24, y: 11.18))
                    ovalCopy3.close()
                    context.saveGState()
                    context.translateBy(x: 2, y: 15.66)
                    ovalCopy3.usesEvenOddFillRule = true
                    UIColor.white.setFill()
                    ovalCopy3.fill()
                    ovalCopy3.lineWidth = 3
                    UIColor(hue: 0.626, saturation: 0.463, brightness: 1, alpha: 1).setStroke()
                    ovalCopy3.stroke()
                    context.restoreGState()
                    
                    /// 26
                    let _26 = NSMutableAttributedString(string: "26")
                    _26.addAttribute(.font, value: UIFont(name: "HiraginoSans-W4", size: 10)!, range: NSRange(location: 0, length: _26.length))
                    _26.addAttribute(.kern, value: -0.06, range: NSRange(location: 0, length: _26.length))
                    _26.addAttribute(.foregroundColor, value: UIColor(white: 0.4, alpha: 1), range: NSRange(location: 0, length: _26.length))
                    context.saveGState()
                    _26.draw(in: CGRect(x: 0, y: 0.59, width: 14, height: 11))
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
            // End container (Outline Mask)
            
            context.restoreGState()
        }
        
        /// Signal frequency: 20
        let signalFrequency20 = NSMutableAttributedString(string: "Signal frequency: 200 hz")
        signalFrequency20.addAttribute(.font, value: UIFont(name: "Helvetica", size: 16)!, range: NSRange(location: 0, length: signalFrequency20.length))
        signalFrequency20.addAttribute(.kern, value: 0.19, range: NSRange(location: 0, length: signalFrequency20.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 39
            paragraphStyle.minimumLineHeight = 39
            signalFrequency20.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: signalFrequency20.length))
        }
        signalFrequency20.addAttribute(.foregroundColor, value: UIColor(hue: 0.576, saturation: 0.954, brightness: 0.8, alpha: 1), range: NSRange(location: 0, length: signalFrequency20.length))
        context.saveGState()
        signalFrequency20.draw(at: CGPoint(x: -132, y: -193))
        context.restoreGState()
        
        /// Testing audio is pla
        let testingAudioIsPla = NSMutableAttributedString(string: "Testing audio is playing")
        testingAudioIsPla.addAttribute(.font, value: UIFont(name: "Helvetica", size: 28)!, range: NSRange(location: 0, length: testingAudioIsPla.length))
        testingAudioIsPla.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: testingAudioIsPla.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 33
            paragraphStyle.minimumLineHeight = 33
            testingAudioIsPla.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: testingAudioIsPla.length))
        }
        context.saveGState()
        context.setAlpha(0.6)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            testingAudioIsPla.draw(at: CGPoint(x: -107, y: -253))
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        /// buttons/float/large/active
        // Warning: New symbols are not supported.
        
        /// buttons/small
        // Warning: New symbols are not supported.
    }
    
    /// Page 3
    
    class func drawPage3() {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Rectangle
        let rectangle = UIBezierPath()
        rectangle.move(to: CGPoint(x: 2, y: 0))
        rectangle.addLine(to: CGPoint(x: 373, y: 0))
        rectangle.addCurve(to: CGPoint(x: 375, y: 2), controlPoint1: CGPoint(x: 374.1, y: 0), controlPoint2: CGPoint(x: 375, y: 0.9))
        rectangle.addLine(to: CGPoint(x: 375, y: 665))
        rectangle.addCurve(to: CGPoint(x: 373, y: 667), controlPoint1: CGPoint(x: 375, y: 666.1), controlPoint2: CGPoint(x: 374.1, y: 667))
        rectangle.addLine(to: CGPoint(x: 2, y: 667))
        rectangle.addCurve(to: CGPoint(x: 0, y: 665), controlPoint1: CGPoint(x: 0.9, y: 667), controlPoint2: CGPoint(x: 0, y: 666.1))
        rectangle.addLine(to: CGPoint(x: 0, y: 2))
        rectangle.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
        rectangle.close()
        context.saveGState()
        context.setAlpha(0.38)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: -145, y: -309)
            rectangle.usesEvenOddFillRule = true
            UIColor(hue: 0.545, saturation: 0.392, brightness: 0.998, alpha: 1).setFill()
            rectangle.fill()
            context.saveGState()
            rectangle.lineWidth = 2
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.clip(using: .evenOdd)
            UIColor(white: 0.592, alpha: 1).setStroke()
            rectangle.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        /// Protect your hearing
        let protectYourHearing = NSMutableAttributedString(string: "Protect your hearing health")
        protectYourHearing.addAttribute(.font, value: UIFont(name: "AvenirNext-DemiBold", size: 20)!, range: NSRange(location: 0, length: protectYourHearing.length))
        protectYourHearing.addAttribute(.foregroundColor, value: UIColor(hue: 0.619, saturation: 0.6, brightness: 0.93, alpha: 1), range: NSRange(location: 0, length: protectYourHearing.length))
        context.saveGState()
        protectYourHearing.draw(at: CGPoint(x: -101, y: 217))
        context.restoreGState()
        
        /// Turn the volume down
        let turnTheVolumeDown = NSMutableAttributedString(string: "Turn the volume down")
        turnTheVolumeDown.addAttribute(.font, value: UIFont(name: "AvenirNext-Medium", size: 16)!, range: NSRange(location: 0, length: turnTheVolumeDown.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            turnTheVolumeDown.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: turnTheVolumeDown.length))
        }
        turnTheVolumeDown.addAttribute(.foregroundColor, value: UIColor(hue: 0.619, saturation: 0.152, brightness: 0.257, alpha: 1), range: NSRange(location: 0, length: turnTheVolumeDown.length))
        context.saveGState()
        turnTheVolumeDown.draw(at: CGPoint(x: -83, y: 293))
        context.restoreGState()
        
        /// Congratulations!
        let congratulations = NSMutableAttributedString(string: "Congratulations!")
        congratulations.addAttribute(.font, value: UIFont(name: "Helvetica", size: 32)!, range: NSRange(location: 0, length: congratulations.length))
        congratulations.addAttribute(.kern, value: -0.77, range: NSRange(location: 0, length: congratulations.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            congratulations.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: congratulations.length))
        }
        congratulations.addAttribute(.foregroundColor, value: UIColor(hue: 0.478, saturation: 0.809, brightness: 0.69, alpha: 1), range: NSRange(location: 0, length: congratulations.length))
        context.saveGState()
        context.setAlpha(0.88)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            congratulations.draw(at: CGPoint(x: -68, y: -242))
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        /// users online
        do {
            context.saveGState()
            context.translateBy(x: 55, y: 97)
            
            /// bg
            do {
                context.saveGState()
                
                /// Rectangle
                let rectangle2 = UIBezierPath()
                rectangle2.move(to: CGPoint(x: 8, y: 0))
                rectangle2.addLine(to: CGPoint(x: 75, y: 0))
                rectangle2.addCurve(to: CGPoint(x: 83, y: 8), controlPoint1: CGPoint(x: 79.42, y: 0), controlPoint2: CGPoint(x: 83, y: 3.58))
                rectangle2.addLine(to: CGPoint(x: 83, y: 47))
                rectangle2.addCurve(to: CGPoint(x: 75, y: 55), controlPoint1: CGPoint(x: 83, y: 51.42), controlPoint2: CGPoint(x: 79.42, y: 55))
                rectangle2.addLine(to: CGPoint(x: 8, y: 55))
                rectangle2.addCurve(to: CGPoint(x: 0, y: 47), controlPoint1: CGPoint(x: 3.58, y: 55), controlPoint2: CGPoint(x: 0, y: 51.42))
                rectangle2.addLine(to: CGPoint(x: 0, y: 8))
                rectangle2.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 0, y: 3.58), controlPoint2: CGPoint(x: 3.58, y: 0))
                rectangle2.close()
                context.saveGState()
                context.setAlpha(0.75)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.translateBy(x: 34, y: 35)
                    // Warning: Blur effects are not supported.
                    rectangle2.usesEvenOddFillRule = true
                    context.saveGState()
                    rectangle2.addClip()
                    context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                                UIColor(hue: 0.07, saturation: 0.33, brightness: 1, alpha: 1).cgColor,
                                UIColor(hue: 0.009, saturation: 0.552, brightness: 1, alpha: 1).cgColor,
                            ] as CFArray, locations: [0, 1])!,
                        start: CGPoint(x: 79.91, y: 0),
                        end: CGPoint(x: -4.94, y: 60.25),
                        options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                /// Rectangle Copy 2
                let rectangleCopy2 = UIBezierPath()
                rectangleCopy2.move(to: CGPoint(x: 8, y: 0))
                rectangleCopy2.addLine(to: CGPoint(x: 142, y: 0))
                rectangleCopy2.addCurve(to: CGPoint(x: 150, y: 8), controlPoint1: CGPoint(x: 146.42, y: 0), controlPoint2: CGPoint(x: 150, y: 3.58))
                rectangleCopy2.addLine(to: CGPoint(x: 150, y: 82))
                rectangleCopy2.addCurve(to: CGPoint(x: 142, y: 90), controlPoint1: CGPoint(x: 150, y: 86.42), controlPoint2: CGPoint(x: 146.42, y: 90))
                rectangleCopy2.addLine(to: CGPoint(x: 8, y: 90))
                rectangleCopy2.addCurve(to: CGPoint(x: 0, y: 82), controlPoint1: CGPoint(x: 3.58, y: 90), controlPoint2: CGPoint(x: 0, y: 86.42))
                rectangleCopy2.addLine(to: CGPoint(x: 0, y: 8))
                rectangleCopy2.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 0, y: 3.58), controlPoint2: CGPoint(x: 3.58, y: 0))
                rectangleCopy2.close()
                context.saveGState()
                rectangleCopy2.usesEvenOddFillRule = true
                context.saveGState()
                rectangleCopy2.addClip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.07, saturation: 0.33, brightness: 1, alpha: 1).cgColor,
                            UIColor(hue: 0.009, saturation: 0.552, brightness: 1, alpha: 1).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 144.41, y: 0),
                    end: CGPoint(x: -8.93, y: 98.6),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                context.restoreGState()
                
                /// Rectangle Copy 2 (Outline Mask)
                context.saveGState()
                rectangleCopy2.addClip()
                
                /// Oval 2
                let oval2 = UIBezierPath()
                oval2.move(to: CGPoint(x: 72, y: 144))
                oval2.addCurve(to: CGPoint(x: 144, y: 72), controlPoint1: CGPoint(x: 111.76, y: 144), controlPoint2: CGPoint(x: 144, y: 111.76))
                oval2.addCurve(to: CGPoint(x: 72, y: 0), controlPoint1: CGPoint(x: 144, y: 32.24), controlPoint2: CGPoint(x: 111.76, y: 0))
                oval2.addCurve(to: CGPoint(x: 0, y: 72), controlPoint1: CGPoint(x: 32.24, y: 0), controlPoint2: CGPoint(x: 0, y: 32.24))
                oval2.addCurve(to: CGPoint(x: 72, y: 144), controlPoint1: CGPoint(x: 0, y: 111.76), controlPoint2: CGPoint(x: 32.24, y: 144))
                oval2.close()
                context.saveGState()
                context.setAlpha(0.08)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.translateBy(x: 40, y: 0)
                    oval2.usesEvenOddFillRule = true
                    UIColor.white.setFill()
                    oval2.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                /// Oval 2 Copy
                let oval2Copy = UIBezierPath()
                oval2Copy.move(to: CGPoint(x: 72.5, y: 145))
                oval2Copy.addCurve(to: CGPoint(x: 145, y: 72.5), controlPoint1: CGPoint(x: 112.54, y: 145), controlPoint2: CGPoint(x: 145, y: 112.54))
                oval2Copy.addCurve(to: CGPoint(x: 72.5, y: 0), controlPoint1: CGPoint(x: 145, y: 32.46), controlPoint2: CGPoint(x: 112.54, y: 0))
                oval2Copy.addCurve(to: CGPoint(x: 0, y: 72.5), controlPoint1: CGPoint(x: 32.46, y: 0), controlPoint2: CGPoint(x: 0, y: 32.46))
                oval2Copy.addCurve(to: CGPoint(x: 72.5, y: 145), controlPoint1: CGPoint(x: 0, y: 112.54), controlPoint2: CGPoint(x: 32.46, y: 145))
                oval2Copy.close()
                context.saveGState()
                context.setAlpha(0.08)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.translateBy(x: -33, y: 61)
                    oval2Copy.usesEvenOddFillRule = true
                    UIColor.white.setFill()
                    oval2Copy.fill()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                context.restoreGState()
                // End Rectangle Copy 2 (Outline Mask)
                
                context.restoreGState()
            }
            
            /// contents
            do {
                context.saveGState()
                context.translateBy(x: 30, y: 25)
                
                /// Min hearing hz
                let minHearingHz = NSMutableAttributedString(string: "Min hearing hz")
                minHearingHz.addAttribute(.font, value: UIFont(name: "HiraginoSans-W4", size: 14)!, range: NSRange(location: 0, length: minHearingHz.length))
                minHearingHz.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: minHearingHz.length))
                context.saveGState()
                minHearingHz.draw(at: CGPoint(x: 0, y: 31))
                context.restoreGState()
                
                /// 700
                let _700 = NSMutableAttributedString(string: "700")
                _700.addAttribute(.font, value: UIFont(name: "HiraginoSans-W6", size: 20)!, range: NSRange(location: 0, length: _700.length))
                _700.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: _700.length))
                context.saveGState()
                _700.draw(at: CGPoint(x: 31, y: 0))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        /// icons/list item/small/achievment
        // Warning: New symbols are not supported.
        
        /// basic stats
        do {
            context.saveGState()
            context.translateBy(x: -125, y: -9)
            
            /// active users
            do {
                context.saveGState()
                context.translateBy(x: 93, y: 0)
                
                /// bg
                do {
                    context.saveGState()
                    
                    /// Rectangle
                    let rectangle3 = UIBezierPath()
                    rectangle3.move(to: CGPoint(x: 8, y: 0))
                    rectangle3.addLine(to: CGPoint(x: 75, y: 0))
                    rectangle3.addCurve(to: CGPoint(x: 83, y: 8), controlPoint1: CGPoint(x: 79.42, y: 0), controlPoint2: CGPoint(x: 83, y: 3.58))
                    rectangle3.addLine(to: CGPoint(x: 83, y: 47))
                    rectangle3.addCurve(to: CGPoint(x: 75, y: 55), controlPoint1: CGPoint(x: 83, y: 51.42), controlPoint2: CGPoint(x: 79.42, y: 55))
                    rectangle3.addLine(to: CGPoint(x: 8, y: 55))
                    rectangle3.addCurve(to: CGPoint(x: 0, y: 47), controlPoint1: CGPoint(x: 3.58, y: 55), controlPoint2: CGPoint(x: 0, y: 51.42))
                    rectangle3.addLine(to: CGPoint(x: 0, y: 8))
                    rectangle3.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 0, y: 3.58), controlPoint2: CGPoint(x: 3.58, y: 0))
                    rectangle3.close()
                    context.saveGState()
                    context.setAlpha(0.75)
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: 34, y: 35)
                        // Warning: Blur effects are not supported.
                        rectangle3.usesEvenOddFillRule = true
                        context.saveGState()
                        rectangle3.addClip()
                        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                                    UIColor(hue: 0.668, saturation: 0.33, brightness: 1, alpha: 1).cgColor,
                                    UIColor(hue: 0.609, saturation: 0.552, brightness: 1, alpha: 1).cgColor,
                                ] as CFArray, locations: [0, 1])!,
                            start: CGPoint(x: 79.91, y: 0),
                            end: CGPoint(x: -4.94, y: 60.25),
                            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    
                    /// Rectangle Copy
                    let rectangleCopy = UIBezierPath()
                    rectangleCopy.move(to: CGPoint(x: 8, y: 0))
                    rectangleCopy.addLine(to: CGPoint(x: 142, y: 0))
                    rectangleCopy.addCurve(to: CGPoint(x: 150, y: 8), controlPoint1: CGPoint(x: 146.42, y: 0), controlPoint2: CGPoint(x: 150, y: 3.58))
                    rectangleCopy.addLine(to: CGPoint(x: 150, y: 82))
                    rectangleCopy.addCurve(to: CGPoint(x: 142, y: 90), controlPoint1: CGPoint(x: 150, y: 86.42), controlPoint2: CGPoint(x: 146.42, y: 90))
                    rectangleCopy.addLine(to: CGPoint(x: 8, y: 90))
                    rectangleCopy.addCurve(to: CGPoint(x: 0, y: 82), controlPoint1: CGPoint(x: 3.58, y: 90), controlPoint2: CGPoint(x: 0, y: 86.42))
                    rectangleCopy.addLine(to: CGPoint(x: 0, y: 8))
                    rectangleCopy.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 0, y: 3.58), controlPoint2: CGPoint(x: 3.58, y: 0))
                    rectangleCopy.close()
                    context.saveGState()
                    rectangleCopy.usesEvenOddFillRule = true
                    context.saveGState()
                    rectangleCopy.addClip()
                    context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                                UIColor(hue: 0.668, saturation: 0.33, brightness: 1, alpha: 1).cgColor,
                                UIColor(hue: 0.609, saturation: 0.552, brightness: 1, alpha: 1).cgColor,
                            ] as CFArray, locations: [0, 1])!,
                        start: CGPoint(x: 144.41, y: 0),
                        end: CGPoint(x: -8.93, y: 98.6),
                        options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                    context.restoreGState()
                    context.restoreGState()
                    
                    /// Rectangle Copy (Outline Mask)
                    context.saveGState()
                    rectangleCopy.addClip()
                    
                    /// Oval 2
                    let oval3 = UIBezierPath()
                    oval3.move(to: CGPoint(x: 72, y: 144))
                    oval3.addCurve(to: CGPoint(x: 144, y: 72), controlPoint1: CGPoint(x: 111.76, y: 144), controlPoint2: CGPoint(x: 144, y: 111.76))
                    oval3.addCurve(to: CGPoint(x: 72, y: 0), controlPoint1: CGPoint(x: 144, y: 32.24), controlPoint2: CGPoint(x: 111.76, y: 0))
                    oval3.addCurve(to: CGPoint(x: 0, y: 72), controlPoint1: CGPoint(x: 32.24, y: 0), controlPoint2: CGPoint(x: 0, y: 32.24))
                    oval3.addCurve(to: CGPoint(x: 72, y: 144), controlPoint1: CGPoint(x: 0, y: 111.76), controlPoint2: CGPoint(x: 32.24, y: 144))
                    oval3.close()
                    context.saveGState()
                    context.setAlpha(0.08)
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: 61, y: -10)
                        oval3.usesEvenOddFillRule = true
                        UIColor.white.setFill()
                        oval3.fill()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    
                    /// Oval 2 Copy
                    let oval2Copy2 = UIBezierPath()
                    oval2Copy2.move(to: CGPoint(x: 72.5, y: 145))
                    oval2Copy2.addCurve(to: CGPoint(x: 145, y: 72.5), controlPoint1: CGPoint(x: 112.54, y: 145), controlPoint2: CGPoint(x: 145, y: 112.54))
                    oval2Copy2.addCurve(to: CGPoint(x: 72.5, y: 0), controlPoint1: CGPoint(x: 145, y: 32.46), controlPoint2: CGPoint(x: 112.54, y: 0))
                    oval2Copy2.addCurve(to: CGPoint(x: 0, y: 72.5), controlPoint1: CGPoint(x: 32.46, y: 0), controlPoint2: CGPoint(x: 0, y: 32.46))
                    oval2Copy2.addCurve(to: CGPoint(x: 72.5, y: 145), controlPoint1: CGPoint(x: 0, y: 112.54), controlPoint2: CGPoint(x: 32.46, y: 145))
                    oval2Copy2.close()
                    context.saveGState()
                    context.setAlpha(0.08)
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: -33, y: 61)
                        oval2Copy2.usesEvenOddFillRule = true
                        UIColor.white.setFill()
                        oval2Copy2.fill()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    
                    context.restoreGState()
                    // End Rectangle Copy (Outline Mask)
                    
                    context.restoreGState()
                }
                
                /// contents
                do {
                    context.saveGState()
                    context.translateBy(x: 34, y: 25)
                    
                    /// Hearing age
                    let hearingAge = NSMutableAttributedString(string: "Hearing age")
                    hearingAge.addAttribute(.font, value: UIFont(name: "HiraginoSans-W4", size: 14)!, range: NSRange(location: 0, length: hearingAge.length))
                    hearingAge.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: hearingAge.length))
                    context.saveGState()
                    hearingAge.draw(at: CGPoint(x: 0, y: 31))
                    context.restoreGState()
                    
                    /// 25
                    let _25 = NSMutableAttributedString(string: "25")
                    _25.addAttribute(.font, value: UIFont(name: "HiraginoSans-W6", size: 20)!, range: NSRange(location: 0, length: _25.length))
                    _25.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: _25.length))
                    context.saveGState()
                    _25.draw(at: CGPoint(x: 27, y: 0))
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// total users
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 106)
                
                /// bg
                do {
                    context.saveGState()
                    
                    /// Rectangle
                    let rectangle4 = UIBezierPath()
                    rectangle4.move(to: CGPoint(x: 8, y: 0))
                    rectangle4.addLine(to: CGPoint(x: 75, y: 0))
                    rectangle4.addCurve(to: CGPoint(x: 83, y: 8), controlPoint1: CGPoint(x: 79.42, y: 0), controlPoint2: CGPoint(x: 83, y: 3.58))
                    rectangle4.addLine(to: CGPoint(x: 83, y: 47))
                    rectangle4.addCurve(to: CGPoint(x: 75, y: 55), controlPoint1: CGPoint(x: 83, y: 51.42), controlPoint2: CGPoint(x: 79.42, y: 55))
                    rectangle4.addLine(to: CGPoint(x: 8, y: 55))
                    rectangle4.addCurve(to: CGPoint(x: 0, y: 47), controlPoint1: CGPoint(x: 3.58, y: 55), controlPoint2: CGPoint(x: 0, y: 51.42))
                    rectangle4.addLine(to: CGPoint(x: 0, y: 8))
                    rectangle4.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 0, y: 3.58), controlPoint2: CGPoint(x: 3.58, y: 0))
                    rectangle4.close()
                    context.saveGState()
                    context.setAlpha(0.75)
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: 34, y: 35)
                        // Warning: Blur effects are not supported.
                        rectangle4.usesEvenOddFillRule = true
                        context.saveGState()
                        rectangle4.addClip()
                        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                                    UIColor(hue: 0.07, saturation: 0.33, brightness: 1, alpha: 1).cgColor,
                                    UIColor(hue: 0.009, saturation: 0.552, brightness: 1, alpha: 1).cgColor,
                                ] as CFArray, locations: [0, 1])!,
                            start: CGPoint(x: 79.91, y: 0),
                            end: CGPoint(x: -4.94, y: 60.25),
                            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    
                    /// Rectangle Copy 2
                    let rectangleCopy3 = UIBezierPath()
                    rectangleCopy3.move(to: CGPoint(x: 8, y: 0))
                    rectangleCopy3.addLine(to: CGPoint(x: 142, y: 0))
                    rectangleCopy3.addCurve(to: CGPoint(x: 150, y: 8), controlPoint1: CGPoint(x: 146.42, y: 0), controlPoint2: CGPoint(x: 150, y: 3.58))
                    rectangleCopy3.addLine(to: CGPoint(x: 150, y: 82))
                    rectangleCopy3.addCurve(to: CGPoint(x: 142, y: 90), controlPoint1: CGPoint(x: 150, y: 86.42), controlPoint2: CGPoint(x: 146.42, y: 90))
                    rectangleCopy3.addLine(to: CGPoint(x: 8, y: 90))
                    rectangleCopy3.addCurve(to: CGPoint(x: 0, y: 82), controlPoint1: CGPoint(x: 3.58, y: 90), controlPoint2: CGPoint(x: 0, y: 86.42))
                    rectangleCopy3.addLine(to: CGPoint(x: 0, y: 8))
                    rectangleCopy3.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 0, y: 3.58), controlPoint2: CGPoint(x: 3.58, y: 0))
                    rectangleCopy3.close()
                    context.saveGState()
                    rectangleCopy3.usesEvenOddFillRule = true
                    context.saveGState()
                    rectangleCopy3.addClip()
                    context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                                UIColor(hue: 0.449, saturation: 0.33, brightness: 1, alpha: 1).cgColor,
                                UIColor(hue: 0.561, saturation: 0.552, brightness: 1, alpha: 1).cgColor,
                            ] as CFArray, locations: [0, 1])!,
                        start: CGPoint(x: 144.41, y: 0),
                        end: CGPoint(x: -6.16, y: 96.81),
                        options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                    context.restoreGState()
                    context.restoreGState()
                    
                    /// Rectangle Copy 2 (Outline Mask)
                    context.saveGState()
                    rectangleCopy3.addClip()
                    
                    /// Oval 2
                    let oval4 = UIBezierPath()
                    oval4.move(to: CGPoint(x: 72, y: 144))
                    oval4.addCurve(to: CGPoint(x: 144, y: 72), controlPoint1: CGPoint(x: 111.76, y: 144), controlPoint2: CGPoint(x: 144, y: 111.76))
                    oval4.addCurve(to: CGPoint(x: 72, y: 0), controlPoint1: CGPoint(x: 144, y: 32.24), controlPoint2: CGPoint(x: 111.76, y: 0))
                    oval4.addCurve(to: CGPoint(x: 0, y: 72), controlPoint1: CGPoint(x: 32.24, y: 0), controlPoint2: CGPoint(x: 0, y: 32.24))
                    oval4.addCurve(to: CGPoint(x: 72, y: 144), controlPoint1: CGPoint(x: 0, y: 111.76), controlPoint2: CGPoint(x: 32.24, y: 144))
                    oval4.close()
                    context.saveGState()
                    context.setAlpha(0.08)
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: 40, y: 0)
                        oval4.usesEvenOddFillRule = true
                        UIColor.white.setFill()
                        oval4.fill()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    
                    /// Oval 2 Copy
                    let oval2Copy3 = UIBezierPath()
                    oval2Copy3.move(to: CGPoint(x: 72.5, y: 145))
                    oval2Copy3.addCurve(to: CGPoint(x: 145, y: 72.5), controlPoint1: CGPoint(x: 112.54, y: 145), controlPoint2: CGPoint(x: 145, y: 112.54))
                    oval2Copy3.addCurve(to: CGPoint(x: 72.5, y: 0), controlPoint1: CGPoint(x: 145, y: 32.46), controlPoint2: CGPoint(x: 112.54, y: 0))
                    oval2Copy3.addCurve(to: CGPoint(x: 0, y: 72.5), controlPoint1: CGPoint(x: 32.46, y: 0), controlPoint2: CGPoint(x: 0, y: 32.46))
                    oval2Copy3.addCurve(to: CGPoint(x: 72.5, y: 145), controlPoint1: CGPoint(x: 0, y: 112.54), controlPoint2: CGPoint(x: 32.46, y: 145))
                    oval2Copy3.close()
                    context.saveGState()
                    context.setAlpha(0.08)
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: -33, y: 61)
                        oval2Copy3.usesEvenOddFillRule = true
                        UIColor.white.setFill()
                        oval2Copy3.fill()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    
                    context.restoreGState()
                    // End Rectangle Copy 2 (Outline Mask)
                    
                    context.restoreGState()
                }
                
                /// contents
                do {
                    context.saveGState()
                    context.translateBy(x: 34, y: 25)
                    
                    /// better than most use
                    let betterThanMostUse = NSMutableAttributedString(string: "better than \nmost users")
                    betterThanMostUse.addAttribute(.font, value: UIFont(name: "HiraginoSans-W4", size: 14)!, range: NSRange(location: 0, length: betterThanMostUse.length))
                    betterThanMostUse.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: betterThanMostUse.length))
                    context.saveGState()
                    betterThanMostUse.draw(at: CGPoint(x: 0, y: 31))
                    context.restoreGState()
                    
                    /// 80%
                    let _80 = NSMutableAttributedString(string: "80%")
                    _80.addAttribute(.font, value: UIFont(name: "HiraginoSans-W6", size: 20)!, range: NSRange(location: 0, length: _80.length))
                    _80.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: _80.length))
                    context.saveGState()
                    _80.draw(at: CGPoint(x: 20, y: 0))
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        /// _/Color/Custom/Flat Blue
        // Warning: New symbols are not supported.
        
        /// Your hearing age is
        let yourHearingAgeIs = NSMutableAttributedString(string: "Your hearing age is 25, \nwhich is better than 80% of our users!")
        yourHearingAgeIs.addAttribute(.font, value: UIFont(name: "Helvetica", size: 17)!, range: NSRange(location: 0, length: yourHearingAgeIs.length))
        yourHearingAgeIs.addAttribute(.kern, value: -0.41, range: NSRange(location: 0, length: yourHearingAgeIs.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 22
            paragraphStyle.minimumLineHeight = 22
            yourHearingAgeIs.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: yourHearingAgeIs.length))
        }
        context.saveGState()
        context.setAlpha(0.78)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            yourHearingAgeIs.draw(at: CGPoint(x: -132, y: -171))
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        /// icons/content/avocado
        // Warning: New symbols are not supported.
        
        /// icons/list item/large/lesson/technology
        // Warning: New symbols are not supported.
        
        /// icons/list item/large/lesson/food
        // Warning: New symbols are not supported.
        
        /// Use earplugs around
        let useEarplugsAround = NSMutableAttributedString(string: "Use earplugs around loud noises")
        useEarplugsAround.addAttribute(.font, value: UIFont(name: "AvenirNext-Medium", size: 16)!, range: NSRange(location: 0, length: useEarplugsAround.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            useEarplugsAround.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: useEarplugsAround.length))
        }
        useEarplugsAround.addAttribute(.foregroundColor, value: UIColor(hue: 0.619, saturation: 0.152, brightness: 0.257, alpha: 1), range: NSRange(location: 0, length: useEarplugsAround.length))
        context.saveGState()
        useEarplugsAround.draw(at: CGPoint(x: -83, y: 265))
        context.restoreGState()
        
        /// icons/list item/large/lesson/technology
        // Warning: New symbols are not supported.
        
        /// Take medications onl
        let takeMedicationsOnl = NSMutableAttributedString(string: "Take medications only as directed")
        takeMedicationsOnl.addAttribute(.font, value: UIFont(name: "AvenirNext-Medium", size: 16)!, range: NSRange(location: 0, length: takeMedicationsOnl.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            takeMedicationsOnl.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: takeMedicationsOnl.length))
        }
        takeMedicationsOnl.addAttribute(.foregroundColor, value: UIColor(hue: 0.619, saturation: 0.152, brightness: 0.257, alpha: 1), range: NSRange(location: 0, length: takeMedicationsOnl.length))
        context.saveGState()
        takeMedicationsOnl.draw(at: CGPoint(x: -83, y: 321))
        context.restoreGState()
        
        /// icons/list item/large/lesson/abstract objects
        // Warning: New symbols are not supported.
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfIPhone8() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        StyleKit2.drawIPhone8()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
